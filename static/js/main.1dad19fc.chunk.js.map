{"version":3,"sources":["components/SphereObj.js","components/CustomSky.js","components/Scene.js","components/App.js","index.js"],"names":["SphereObj","radius","useThree","scene","gl","cubeRenderTarget","WebGLCubeRenderTarget","format","RGBFormat","generateMipmaps","minFilter","LinearMipmapLinearFilter","cubeCamera","CubeCamera","position","set","add","useFrame","update","material","useRef","useTweaks","color","metalness","value","min","max","clearcoat","roughness","radiusVariationAmplitude","radiusNoiseFrequency","props","clock","current","time","getElapsedTime","args","position-y","castShadow","envMap","renderTarget","texture","ref","uniforms","type","Color","Vert","Head","Body","Frag","CustomSky","inclination","azimuth","rayleigh","turbidity","intensity","theta","Math","PI","phi","x","cos","y","sin","z","Sky","distance","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","rotation-x","wireframe","attach","rotation","receiveShadow","opacity","Scene","softShadows","shadowMap","colorManagement","PerspectiveCamera","makeDefault","fov","OrbitControls","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQA8HeA,MAhHf,YAAmC,IAAD,IAAbC,cAAa,MAAJ,EAAI,IAEVC,cAAdC,EAFwB,EAExBA,MAAOC,EAFiB,EAEjBA,GACTC,EAAmB,IAAIC,wBAAsB,IAAK,CACtDC,OAAQC,YACRC,iBAAiB,EACjBC,UAAWC,6BAEPC,EAAa,IAAIC,aAAW,EAAG,IAAMR,GAC3CO,EAAWE,SAASC,IAAI,EAAG,IAAK,GAChCZ,EAAMa,IAAIJ,GACVK,aAAS,kBAAML,EAAWM,OAAOd,EAAID,MAErC,IAAMgB,EAAWC,mBAbe,EAmB5BC,YAAU,CACZC,MAAO,OACPC,UAAW,CAAEC,MAAO,GAAKC,IAAK,EAAGC,IAAK,GACtCC,UAAW,CAAEH,MAAO,GAAKC,IAAK,EAAGC,IAAK,GACtCE,UAAW,CAAEJ,MAAO,GAAKC,IAAK,EAAGC,IAAK,GACtCG,yBAA0B,CAAEL,MAAO,EAAGC,IAAK,EAAGC,IAAK,GACnDI,qBAAsB,CAAEN,MAAO,GAAKC,IAAK,EAAGC,IAAK,KAVjDJ,EAf8B,EAe9BA,MACAO,EAhB8B,EAgB9BA,yBACAC,EAjB8B,EAiB9BA,qBACGC,EAlB2B,2EA8BhC,OAFAd,aAAS,gBAAGe,EAAH,EAAGA,MAAH,OAAgBb,EAASc,QAAQC,KAAOF,EAAMG,oBAGrD,cAAC,IAAD,CAAQC,KAAM,CAACnC,EAAQ,IAAK,KAAMoC,aAAY,GAAIC,YAAU,EAA5D,SAEE,eAAC,IAAD,yBACEC,OAAQ3B,EAAW4B,aAAaC,QAChCC,IAAKvB,GACDY,GAHN,IAIEY,SAAU,CACR1C,OAAQ,CAAEuB,MAAOvB,EAAQ2C,KAAM,SAC/BV,KAAM,CAAEV,MAAO,EAAGoB,KAAM,SACxBtB,MAAO,CAAEE,MAAO,IAAIqB,QAAMvB,GAAQsB,KAAM,QACxCf,yBAA0B,CACxBL,MAAOK,EAA0Be,KAAM,SAEzCd,qBAAsB,CACpBN,MAAOM,EAAsBc,KAAM,UAZzC,gCAiBE,cAAC,IAASE,KAAKC,KAAf,o/IAsCA,cAAC,IAASD,KAAKE,KAAf,sWAcA,cAAC,IAASC,KAAKD,KAAf,8G,QC1DOE,MArDf,WACEjC,aAAS,gBAAGe,EAAH,EAAGA,MAAH,OAAgBb,EAASc,QAAQC,KAAOF,EAAMG,oBACvD,IAAMhB,EAAWC,mBAFE,EAG6CC,YAAU,CACxE8B,YAAY,CAAE3B,MAAO,GAAKC,IAAK,EAAGC,IAAK,GACvC0B,QAAQ,CAAE5B,MAAO,IAAMC,IAAK,EAAGC,IAAK,GACpC2B,SAAU,CAAC7B,MAAO,GAAKC,IAAK,EAAGC,IAAK,GACpC4B,UAAW,CAAC9B,MAAO,GAAKC,IAAK,EAAGC,IAAK,GACrC6B,UAAW,CAAC/B,MAAO,GAAKC,IAAK,EAAGC,IAAK,KAL/ByB,EAHW,EAGXA,YAAaC,EAHF,EAGEA,QAASC,EAHX,EAGWA,SAAUC,EAHrB,EAGqBA,UAAWC,EAHhC,EAGgCA,UAQ7CC,EAAQC,KAAKC,IAAMP,EAAc,IACjCQ,EAAM,EAAIF,KAAKC,IAAMN,EAAU,IAEjCQ,EAAkB,GAAdH,KAAKI,IAAIF,GACbG,EAAoB,GAAhBL,KAAKM,IAAIP,GACbQ,EAAkB,GAAdP,KAAKM,IAAIJ,GAEjB,OACE,qCACE,cAACM,EAAA,EAAD,CACEvB,IAAOvB,EACP+C,SAAU,KACVf,YAAaA,EACbC,QAASA,EACTC,SAAUA,EACVC,UAAWA,IAEb,kCACEhB,YAAU,EACVI,IAAKvB,EACLL,SAAU,CAAC8C,EAAGE,EAAGE,GACjB1C,MAAO,SACPiC,UAAWA,EACXY,uBAAsB,KACtBC,wBAAuB,KACvBC,oBAAmB,IACnBC,sBAAqB,GACrBC,sBAAqB,GACrBC,oBAAmB,GACnBC,wBAAuB,KAEzB,cAAC,IAAD,CAAOC,aAAYjB,KAAKC,GAAK,EAAGtB,KAAM,CAAC,IAAK,IAAK,EAAG,GAApD,SACE,mCAAmBd,MAAM,QAAQqD,WAAS,EAACC,OAAO,eAGpD,cAAC,IAAD,CAAOC,SAAU,EAAEpB,KAAKC,GAAK,EAAG,EAAG,GAAI5C,SAAW,CAAC,EAAG,EAAG,GAAIsB,KAAM,CAAC,IAAK,KAAM0C,eAAa,EAA5F,SACE,gCAAgBF,OAAO,WAAWG,QAAS,WC9CpC,SAASC,EAAT,GAOb,OAPiC,eACjCC,cAOE,eAAC,IAAD,CAAQC,WAAS,EAACC,iBAAe,EAAjC,UACE,cAACC,EAAA,EAAD,CAAmBC,aAAW,EAACvE,SAAU,EAAE,GAAG,GAAG,IAAKwE,IAAK,GAA3D,SACE,2BAGF,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAACC,EAAA,EAAD,OCVSC,MARf,WACE,OACE,mCACE,cAACR,EAAD,OCANS,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1dad19fc.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport { useFrame, useThree } from 'react-three-fiber';\nimport Material from 'component-material';\nimport { Sphere } from '@react-three/drei';\nimport glsl from 'babel-plugin-glsl/macro';\nimport { useTweaks } from 'use-tweaks';\nimport {\n  Color,\n  CubeCamera,\n  WebGLCubeRenderTarget,\n  RGBFormat,\n  LinearMipmapLinearFilter\n} from 'three';\n\nfunction SphereObj({ radius = 4 }){\n\n  const { scene, gl } = useThree();\n  const cubeRenderTarget = new WebGLCubeRenderTarget(256, {\n    format: RGBFormat,\n    generateMipmaps: true,\n    minFilter: LinearMipmapLinearFilter,\n  });\n  const cubeCamera = new CubeCamera(1, 1000, cubeRenderTarget);\n  cubeCamera.position.set(0, 100, 0);\n  scene.add(cubeCamera);\n  useFrame(() => cubeCamera.update(gl, scene));\n\n  const material = useRef();\n  const {\n    color,\n    radiusVariationAmplitude,\n    radiusNoiseFrequency,\n    ...props\n  } = useTweaks({\n    color: \"#fff\",\n    metalness: { value: 0.9, min: 0, max: 1 },\n    clearcoat: { value: 0.1, min: 0, max: 1 },\n    roughness: { value: 0.7, min: 0, max: 1 },\n    radiusVariationAmplitude: { value: 1, min: 0, max: 5 },\n    radiusNoiseFrequency: { value: 0.3, min: 0, max: 2 }\n  });\n\n  useFrame(({ clock }) => (material.current.time = clock.getElapsedTime()));\n\n  return (\n    <Sphere args={[radius, 512, 512]} position-y={10} castShadow>\n    \n      <Material\n        envMap={cubeCamera.renderTarget.texture}\n        ref={material}\n        {...props}\n        uniforms={{\n          radius: { value: radius, type: \"float\"},\n          time: { value: 0, type: \"float\" },\n          color: { value: new Color(color), type: \"vec3\" },\n          radiusVariationAmplitude: {\n            value: radiusVariationAmplitude, type: \"float\" \n          },\n          radiusNoiseFrequency: {\n            value: radiusNoiseFrequency, type: \"float\"\n          }\n        }}\n      > \n      console.log(color);\n        <Material.Vert.Head>\n          {\n            glsl`\n            #pragma glslify: snoise = require(glsl-noise-simplex/3d.glsl)\n            float fsnoise(float val1, float val2, float val3){\n              return snoise(vec3(val1,val2,val3));\n            }\n\n            vec3 distortFunct(vec3 transformed, float factor) {\n              float radiusVariation = -fsnoise\n              (\n                transformed.x * radiusNoiseFrequency + time, \n                transformed.y * radiusNoiseFrequency + time, \n                transformed.z * radiusNoiseFrequency + time\n              ) * radiusVariationAmplitude * factor;\n              return normalize(transformed) * (radiusVariation + radius);\n            }\n\n            vec3 orthogonal(vec3 v) {\n              return normalize(abs(v.x) > abs (v.z) ? vec3(-v.y, v.x, 0.0) : vec3(0.0, -v.z, v.y));\n            }\n\n            vec3 distortNormal(vec3 position, vec3 distortedPosition, vec3 normal){\n\n              vec3 tangent1 = orthogonal(normal);\n              vec3 tangent2 = normalize(cross(normal, tangent1));\n\n              vec3 nearby1 = position + tangent1 * 0.1;\n              vec3 nearby2 = position + tangent2 * 0.1;\n\n              vec3 distorted1 = distortFunct(nearby1, 1.0);\n              vec3 distorted2 = distortFunct(nearby2, 1.0);\n\n              return normalize(cross(distorted1 - distortedPosition, distorted2 - distortedPosition));\n            }\n          `\n        }</Material.Vert.Head>\n\n        <Material.Vert.Body>{\n          `\n            float updateTime = time / 10.0;\n\n            transformed = distortFunct(transformed, 1.0);\n\n            vec3 distortedNormal = distortNormal(position, transformed, normal);\n\n            vNormal = normal + distortedNormal;\n\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(transformed, 1.0);\n          `\n        }</Material.Vert.Body>\n\n        <Material.Frag.Body>{\n          `\n            gl_FragColor = vec4(gl_FragColor.rgb * color, gl_FragColor.a);\n          `\n        }</Material.Frag.Body>\n      </Material>\n    </Sphere>\n  );\n}\n\nexport default SphereObj;\n\n","import React, { useRef } from 'react';\nimport { Sky, Plane } from '@react-three/drei';\nimport { useTweaks } from 'use-tweaks';\nimport { useFrame } from 'react-three-fiber';\n\nfunction CustomSky() {\n  useFrame(({ clock }) => (material.current.time = clock.getElapsedTime()));\n  const material = useRef();\n  const { inclination, azimuth, rayleigh, turbidity, intensity} = useTweaks({\n    inclination:{ value: 0.5, min: 0, max: 1},\n    azimuth:{ value: 0.25, min: 0, max: 1},\n    rayleigh: {value: 0.5, min: 0, max: 1},\n    turbidity: {value: 0.6, min: 0, max: 1},\n    intensity: {value: 0.5, min: 0, max: 1}\n  });\n\n  const theta = Math.PI * (inclination - 0.5)\n  const phi = 2 * Math.PI * (azimuth - 0.5)\n\n  let x = Math.cos(phi)*10\n  let y = Math.sin(theta)*10\n  let z = Math.sin(phi)*10\n\n  return (\n    <>\n      <Sky\n        ref = {material}\n        distance={45000}\n        inclination={inclination}\n        azimuth={azimuth}\n        rayleigh={rayleigh}\n        turbidity={turbidity}\n      />  \n      <directionalLight\n        castShadow\n        ref={material}\n        position={[x, y, z]}\n        color={0xfffadb}\n        intensity={intensity}\n        shadow-mapSize-width={1024}\n        shadow-mapSize-height={1024}\n        shadow-camera-far={200}\n        shadow-camera-left={-20}\n        shadow-camera-right={20}\n        shadow-camera-top={20}\n        shadow-camera-bottom={-20}\n      />\n      <Plane rotation-x={Math.PI / 2} args={[100, 100, 4, 4]}>\n        <meshBasicMaterial color=\"black\" wireframe attach=\"material\" />\n      </Plane>\n\n      <Plane rotation={[-Math.PI / 2, 0, 0]} position= {[0, 0, 0]} args={[300, 300]} receiveShadow>\n        <shadowMaterial attach=\"material\" opacity={0.4}/>\n      </Plane>\n    </>\n    );\n}\n\nexport default CustomSky;","import React from 'react'\nimport { Canvas} from 'react-three-fiber'\nimport { OrbitControls, softShadows, PerspectiveCamera } from '@react-three/drei';\nimport SphereObj from './SphereObj';\nimport CustomSky from './CustomSky';\n\nexport default function Scene({}) {\n  softShadows()\n  // const { fov, up, lookAt } = camera\n  // const ref = useUpdate( (pcam) => {\n  //   console.log( `lookAt is ${lookAt}`)\n  //   pcam.lookAt( new THREE.Vector3( ...lookAt ) )\n  // }, [ lookAt ] )\n  return (\n    <Canvas shadowMap colorManagement>\n      <PerspectiveCamera makeDefault position={[-15,20,30]} fov={70} >\n        <mesh/>\n      </PerspectiveCamera>\n      {/* <Welcome/> */}\n      <CustomSky/>\n      <SphereObj /> \n      <OrbitControls/>\n    </Canvas>\n  )\n}\n\n// camera= {{position: [-15, 20, 30], near: 0.1, fov: 60}}","import React from 'react';\nimport Scene from './Scene'\n\nfunction App() {\n  return (\n    <>\n      <Scene/>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}